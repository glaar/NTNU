package edu.ntnu.robocode.jsniper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

//Load configuration parameters from sniper.config in the robocode directory.
public class Config {
    public static String path; //path for data files
    public static String opponent; //name of the opponent, used for naming data files for different opponents
    public static String dataFile; //data file with positions for several rounds generated in PositionData
    public static String networkFile; //file with ANN generated by Encog in ANN

    public static double learningRate; //learning rate in ANN training
    public static double momentum; //controls the ability of ANN training to jump over local min/max
    public static double error; //ANN training stops when the training error is less or equal this value

    public static int period; //controls the time between position measurements
    public static int lookback; //number of previous positions to use as features to predict the next position
    public static int lookahead ; //number of next postions to predict
    public static double bulletPower; //power of bullet to shoot by SniperRobot

    //Read property file.
    static {
        Properties prop = new Properties();

        try {
            prop.load(new FileInputStream("config/jsniper.properties"));

            path = prop.getProperty("path");
            new File(path).mkdirs();

            opponent = prop.getProperty("opponent");
            dataFile = opponent + "_data.ser";
            networkFile = opponent + "_network.eg";

            learningRate = Double.parseDouble(prop.getProperty("learning_rate"));
            momentum = Double.parseDouble(prop.getProperty("momentum"));
            error = Double.parseDouble(prop.getProperty("error"));

            period = Integer.parseInt(prop.getProperty("period"));
            lookback = Integer.parseInt(prop.getProperty("lookback"));
            lookahead = Integer.parseInt(prop.getProperty("lookahead"));
            bulletPower = Double.parseDouble(prop.getProperty("bullet_power"));
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}