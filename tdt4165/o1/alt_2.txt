%===2a===
declare Y = 42
declare Z = 23
declare X = Y*Z
{Browse X}

%===2b===
declare
X Y
X = 'dette er magisk'
{Browse Y}
Y = X

/*
man kompilerer koden, s책 Browse finner verdien til Y. Dette kan bli brukt til 책 skrive relevant kode p책 samme sted og f책 resultatet ut uansett.
*/

%===3===
declare
fun {Min X Y}
   if X>Y then
      Y
   else
      X
   end
end

{Browse {Min 10 8}}

Y=true
X=false
fun{IsBigger N T}
   if N>T then
      Y
   else
      X
   end
end

{Browse {IsBigger 12 11}}

%===4===
declare
local 
   A D O 
in

proc{Circle R}
   A=3.14*R*R
   D=2.0*R
   O=3.14*D
end

{Circle 5.0}

{Browse A}
{Browse D}
{Browse O}
end

%===5a===
declare
fun {SumTo F L}
   if L>F then
      F + {SumTo F+1 L}
   else
      F
   end
end

{Browse {SumTo 3 5}}

%===5b===
declare
fun{Max X Y}
   if X==0 then
      Y
   else
      {Max X-1 Y-1}
   end
end

declare K = {Max 7 6}
if K<0 then
   {Browse 'X is the biggest'}
else
   {Browse 'Y is the biggest'}
end

{Browse {Max 5 10}}

%===7===
declare

%a
fun {Length Xs}
   case Xs of nil then
      0
   [] _|T then
      1+{Length T}
   end
end

%b
fun {Take Xs N}
   if N<1 then
      nil
   else
      case Xs of nil then
	 nil
      [] H|T then
	 H|{Take T N-1}
      end
   end
end

%c
fun {Drop Xs N}
   if N<1 then
      Xs
   else
      case Xs of nil then
	 nil
      [] _|T then
	 {Drop T N-1}
      end
   end
end

%d
fun {Append Xs Ys}
   case Xs
   of nil then
      Ys
   [] H|T then
      H|{Append T Ys}
   end
end

%e
fun {Member Xs Y}
   case Xs of nil then
      false
   [] H|T then
      if H==Y then
	 true
      else
	 {Member T Y}
      end
   end
end

%f
fun {Position Xs Y}
   case Xs of H|T then
      if H==Y then
	 1
      else
	 1+{Position T Y}
      end
   end
end

%===8===
declare
Keys = ["local" "in" "if" "then" "else" "end"]
Ops  = ["+" "-" "*" "/" "=" "=="]

fun{Tokenize L}
   case L of Lexeme|Rest then
      Token  =
      if {Member Lexeme Keys}  then
	 key(Lexeme)
      elseif {Member Lexeme Ops} then
	 op(Lexeme)
      else
	 case Lexeme of Letter|_ then
	    if Letter>=&a andthen Letter =< &z then
	       atom(Lexeme)
	    elseif Letter >= &A andthen Letter =< &Z then
	       id(Lexeme)
	    else
	       invalid %ved ulovlig leksem
	    end
	 end
      end in
      Token|{Tokenize Rest}
   else
      nil
   end
end
